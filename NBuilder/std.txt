"#", "(C) 2017-2023 FrankHB.",
"NPLC basic derivation extension modules.";

"NOTE", "Some of deriveations are defined in %YFramework.NPL.Dependency.";
$def! $rem $vau . #ignore "";
$def! $redef! $def!;
$defv%! $unspecified ((&x .)) d forward! (eval% x d);
$defv! $defu! (&x .&xs) d eval (list $set! d x $unspecified xs) d;

"NOTE", "Core library.";
$defl! xcons (&x &y) cons y x;
$defl! xcons% (&x &y) cons% y x;
$defv%! $while (&test .&exprseq) d
	$when (eval test d)
		(eval% (list* () $sequence exprseq) d)
		(eval% (list* () $while (forward! test) (forward! exprseq)) d);
$defv%! $until (&test .&exprseq) d
	$unless (eval test d)
		(eval% (list* () $sequence exprseq) d)
		(eval% (list* () $until (forward! test) (forward! exprseq)) d);
$defl%! and &x $sequence
	($defl%! and-aux (&h &l) $if (null? l) (forward! h)
		(and-aux ($if h (forward! (first% l)) #f) (forward! (rest% l))))
	(and-aux #t (forward! x));
$defl%! or &x $sequence
	($defl%! or-aux (&h &l) $if (null? l) (forward! h)
		($let% ((&c forward! (first% l)))
			or-aux (forward! ($if c c h)) (forward! (rest% l))))
	(or-aux #f (forward! x));
$defw%! foldl1 (&kons &knil &l) d
	apply accl (list% (forward! l) null? (forward! knil) first rest% kons) d;
$defw%! map1-reverse (&appv &l) d foldl1
	($lambda (&x &xs) cons (apply appv (list% (forward! x)) d) xs) () l;
$defl! list-copy-strict (l) foldr1 cons () (forward! l);
$defl! list-copy (x) $if (list? x) (list-copy-strict x) x;
$defl! reverse (&l) foldl1 cons () l;
$defl! snoc (&x &r) (list-concat r (list x));
$defl! snoc% (&x &r) (list-concat r (list% x));
$defl! filter (&accept? &ls) apply append
	(map1 ($lambda (&x) $if (apply accept? (list x)) (list x) ()) ls);
$defl! reduce (&ls &bin &id) $cond
	((null? ls) forward! id)
	((null? (rest& ls)) first% (forward! ls))
	(#t bin (first% (forward ls))
		(reduce (rest% (forward ls)) bin (forward! id)));
$defl! memv? (&x &ls) apply or (map1 ($lambda (&y) eqv? x y) ls);
$defl! memq? (&x &ls) apply or (map1 ($lambda (&y) eq? x y) ls);
"TODO", "Provide 'eq%?' and 'equal%?'.";
$defv%! $letrec* (&bindings .&body) d
	eval% ($if (null? bindings) (list*% $letrec bindings body)
		(list $letrec (list% (first bindings))
		(list*% $letrec* (rest% bindings) body))) d;
$defv%! $letrec*% (&bindings .&body) d
	eval% ($if (null? bindings) (list*% $letrec% bindings body)
		(list $letrec% (list% (first bindings))
		(list*% $letrec*% (rest% bindings) body))) d;
$defv! $let-safe (&bindings .&body) d
	eval% (list* () $let/e (() make-standard-environment) bindings body) d;
$defv! $let-safe% (&bindings .&body) d
	eval% (list* () $let/e% (() make-standard-environment) bindings body) d;
$defl! list-push-back! (&l &x) $if (modifiable? (check-list-reference l))
	(assign! l (list-concat (idv l) (list% (forward! x))))
	(raise-type-error "Modifiable object expected.");
$defw%! foldr (&kons &knil .&ls) d
	accr (move! ls) nonfoldable? (forward! knil) list-extract-first
		list-extract-rest%
		($lambda (&x &st) apply kons (list-concat x (list% (forward! st))) d);
$defw%! map (&appv .&ls) d
	accr (move! ls) nonfoldable? () list-extract-first
		list-extract-rest%
		($lambda (&x &xs) cons% (apply appv (forward! x) d) (forward! xs));
$defw! for-each-rtl &ls env $sequence (apply map ls env) #inert;

"NOTE", "Environments library.";
"NOTE", "Only '$binds?' is like in Kernel.";
$defw! environment-bound? (&e &str) d eval (list bound? str) (eval e d);
$defv! $binds? (&e .&ss) d $let ((&senv eval e d))
	foldl1 $and #t (map1 ($lambda (s) (wrap $binds1?) senv s) ss);

"NOTE", "Type operation library.";
$defl! ptype (&x) ($remote-eval puts std.io) (nameof (typeid x));
$defl! typeid-match? (&x &id) eqv? (get-typeid id) (typeid x);
$defl! bool? (&x) typeid-match? x "bool";
$defl/e! basic-identifier? std.strings (&x)
	$if (symbol? x) (symbol-string? (symbol->string x)) #f;
$defl! environment? (&x)
	$or (typeid-match? x "environment") (typeid-match? x "environment#owned");
$defl! combiner? (&x) typeid-match? x "combiner";
$defl/e! operative? std.math (&x)
	$and (combiner? x) (=? (get-wrapping-count x) 0);
$defl/e! applicative? std.math (&x)
	$and (combiner? x) (not? (=? (get-wrapping-count x) 0));
$defl! int? (&x) typeid-match? x "int";

"NOTE", "Numeric library.";
$defl! iota (&x)
	$if (eqv? x 0) ()
		(list-concat (iota (($remote-eval% sub1 std.math) x)) (list x));
$defl! iota-range (first last)
	$if (($remote-eval% <? std.math) first last)
		(cons first (iota-range (($remote-eval% add1 std.math) first) last)) ();

"NOTE", "String library.";
$def! std.strings make-environment ($as-environment ($provide/let! (
	retain-string
	b2str
)
((mods () get-current-environment))
(
	$defl/e! retain-string std.strings (&str) ++ "\"" str "\"";
	$defl/e! b2str mods (&b) $if b "#t" "#f"
))) std.strings;

"NOTE", "I/O library.";
$def! std.io make-environment ($as-environment ($provide/let! (
	bput
	bputs
	iput
	putss
)
((mods derive-current-environment std.strings std.io))
(
	$defl/e! bput mods (&b) put (b2str b);
	$defl/e! bputs mods (&b) puts (b2str b);
	$defl/e! iput mods (&x) puts (itos x);
	$defl/e! putss mods (.&xs) puts (apply ++ (forward! xs))
))) std.io;

